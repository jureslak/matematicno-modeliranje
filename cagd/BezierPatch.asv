classdef BezierPatch
    properties
        Bx
        By
        Bz
        n
    end
    
    methods
        function obj = BezierPatch(Bx, By, Bz)
            % B = seznam koordinat po tockah
            assert(ismatrix(Bx), 'Bx is not a matrix!');
            assert(ismatrix(By), 'By is not a matrix!');
            assert(ismatrix(Bz), 'Bz is not a matrix!');
            obj.Bx = BezierPatchSlice(Bx);
            [obj.n, m] = size(Bx);
            assert(obj.n == m, 'Matrix must be square');
            [ay, by] = size(By);
            assert(ay == obj.n, 'By not of compatible size with Bx.');
            assert(by == obj.n, 'By not of compatible size with Bx.');
            obj.By = BezierPatchSlice(By);
            [az, bz] = size(Bz);
            assert(az == obj.n, 'Bz not of compatible size with Bx.');
            assert(bz == obj.n, 'Bz not of compatible size with Bx.');
            obj.Bz = BezierPatchSlice(Bz);
            obj.n = obj.n - 1;
        end
    
        function b = val(self, u)
            % U barycentric coordinates of points
            [q, d] = size(u);
            assert(d == 3, 'Only in 3D.');
            assert(norm(sum(u, 2) - ones(q, 1)) < 1e-15, 'Coordinates must be barycentric, error = %g.', norm(sum(u, 2) - ones(q, 1)));
            N = size(u, 1);
            b = zeros(N, 3);
            for i = 1:N
                b(i, 1) = self.Bx.decastejau(u(i, :));
                b(i, 2) = self.By.decastejau(u(i, :));
                b(i, 3) = self.Bz.decastejau(u(i, :));
            end
        end
        
        function plot(self, d)
            
        end
    end
    
%     function tri = triangulation_index(D)
% Vrne indekse tock, ki sestavljajo trikotnike v domeni D, za uporabo v
% funkcijah trimesh in trisurf. 
% 
% [n,~] = size(D);
% tri = [];
% tocka = 1;
% for i=1:n-1
%     for j=1:n-i
%         tri = [tri;  tocka tocka+1 tocka+(n-i)+1];
%         if j ~= 1
%             tri = [tri; tocka tocka+(n-i) tocka+(n-i)+1];
%         end
%         tocka = tocka+1;
%     end
%     tocka = tocka+1;
% end
% 
% end
    
    
    methods(Static)
        function [U, T] = uniform_mesh(d)
            N = d*(d+1)/2;
            U = zeros(N, 3);
            T = zeros(d*d, 3);
            t = 1;
            c = 1;
            for i = 0:d
                for j = 0:(d-i)
                    k = d - i - j;
                    U(c, :) = [k/d, j/d, i/d];
                    if i ~= d
                        T(t, :) = [c c+1 c+d-i+2];
                        t = t + 1;
                        if j ~= 0
                            T(t, :) = [c c+d-i+1 c+d-i+2];
                            t = t + 1;
                        end
                    end
                    c = c + 1;
                end
            end
        end
    end
end

